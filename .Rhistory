x1= rnorm(100, 5, 3) # second column
x2 = rexp(100, rate = 2) # third column
xmat<-as.matrix(cbind(x0,x1,x2)) # compute IVs matrix
truebeta <- cbind(c(1,2,3)) # store beta values
y <- xmat %*% truebeta +  rnorm(100,0,1) # compute y
y
library(installr)
updateR()
## Packages for Directry Setting and Data Loading
library(rprojroot); library(readstata13); library(foreign)
## For Visualization & Presentation
library(ggplot2); library(texreg)
remove.packages("mgcv")
?Sys.getenv()
Sys.getenv()
?Sys.setenv()
.libPaths("C:/Program Files/R/R-3.4.3/library")
.libPaths()
q()
.libPaths()
.libPaths()
.libPaths()
state.abb
#' ### Combined Score
?alpha
#' ### Combined Score
?psyc::alpha
#' ### Combined Score
??alpha
set.seed(42) #keep the same starting values
#four congeneric measures
r4 <- sim.congeneric()
alpha(r4)
psych::alpha(r4)
#' ### Combined Score
sjalpha <- psych::alpha(dn[,c("sj2","sj3","sj4","sj5","sj6","sj7","sj8")])
set.seed(42) #keep the same starting values
#four congeneric measures
r4 <- psych::sim.congeneric()
psych::alpha(r4)
set.seed(42) #keep the same starting values
#four congeneric measures
r4 <- psych::sim.congeneric()
a <- psych::alpha(r4)
a <- psych::alpha(r4)
a$mean
#four congeneric measures
r4 <- psych::sim.congeneric()
a <- psych::alpha(r4)
a$scores
a$total
a$scores
a$Fit
r4
summary(a)
b <- summary(a)
a$scores
# examples of two independent factors that produce reasonable alphas
#this is a case where alpha is a poor indicator of unidimensionality
two.f <- sim.item(8)
library(psych)
# examples of two independent factors that produce reasonable alphas
#this is a case where alpha is a poor indicator of unidimensionality
two.f <- sim.item(8)
#specify which items to reverse key by name
alpha(two.f,keys=c("V1","V2","V7","V8"))
#by location
alpha(two.f,keys=c(1,2,7,8))
#automatic reversal base upon first component
alpha(two.f)
#automatic reversal base upon first component
a <- alpha(two.f)
a$scores
2*4*4*2
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("stringi")
100-14.3
(14.3*13)/85.7
14.3*13
185.9/(185.9+85.7)
125/200
10/18
991/(991+810)
424/(424+124)
0.77/0.55
(424+124)/(991+810)
155/424
45/124
0.365/0.362
1.5*1.2
0.18/(0.4+0.18)
?rbinom
##
rbinom(1, size = 1, prob=1)
## Binomial Distribution
rbinom(1, size = 10, prob = c(.9))
##
rbinom(1, size = 1, prob=1)
##
rbinom(1, size = 1, prob=1)
##
rbinom(1, size = 1, prob=1)
##
rbinom(1, size = 1, prob=0.5)
## Binomial Distribution
rbinom(1, size = 10, prob = c(.9))
## Binomial Distribution
rbinom(1, size = 10, prob = c(.9,.8))
## Binomial Distribution
rbinom(1, size = 10, prob = c(.9))
## Bernoui Distribution?
rbinom(10, size = 1, prob=0.5)
## Binomial Distribution
rbinom(10, size = 10, prob = c(.9))
## Binomial Distribution
rbinom(10, size = 10, prob = c(.9,0.2,0.3))
## Binomial Distribution
rbinom(10, size = 1000, prob = c(.9,0.2,0.3))
dbinom(10, size = 1000, prob = c(0.9))
dbinom(0.1, size = 1000, prob = c(0.9))
dbinom(2, size = 1000, prob = c(0.9))
dbinom(900, size = 1000, prob = c(0.9))
dbinom(900, size = 100, prob = c(0.9))
dbinom(20, size = 100, prob = c(0.9))
dbinom(500:1000, size = 1000, prob = c(0.9))
sum(dbinom(500:1000, size = 1000, prob = c(0.9)))
sum(dbinom(1:500, size = 1000, prob = c(0.9)))
sum(dbinom(1:800, size = 1000, prob = c(0.9)))
sum(dbinom(1:900, size = 1000, prob = c(0.9)))
sum(dbinom(0:900, size = 1000, prob = c(0.9)))
0:900
dbinom(900, size = 1000, prob = c(0.9))
#
pbinom(900, size = 1000, prob = c(0.9))
#
pbinom(900, size = 1000, prob = c(0.9))
sum(dbinom(0:900, size = 1000, prob = c(0.9)))
#
pbinom(0.8, size = 1000, prob = c(0.9))
#
pbinom(0.9, size = 1000, prob = c(0.9))
#
pbinom(0.1, size = 1000, prob = c(0.9))
#
pbinom(1, size = 1000, prob = c(0.9))
#
pbinom(2, size = 1000, prob = c(0.9))
#
qbinom(0.8, size = 1000, prob = c(0.9))
?rpois
rpois(10, 414)
dpois(73, 414)
ppois(73, 414)
ppois(400, 414)
dpois(400, 414)
qpois(0.8, 414)
?runif
runif(10, min = 10, max=20)
?rnegbinom
?rnbinom
runif(10, min = 10, max=20)
dunif(10, min = 10, max=20)
dunif(15, min = 10, max=20)
punif(15, min = 10, max=20)
punif(17, min = 10, max=20)
qunif(0.8, min = 10, max=20)
rnbinom(10, min = 10, max=20)
rnbinom(10, size=1000, prob=0.3, mu=4)
rnbinom(10, size=400, prob=0.8)
rnbinom(10, size=1000, prob=0.8)
dnbinom(200, size=1000, prob=0.8)
pnbinom(250, size=1000, prob=0.8)
qnbinom(0.8, size=1000, prob=0.8)
#+ eval=FALSE, echo=FALSE
rmarkdown::render("TA_session_20181022.R","pdf_document")
#' ---
#' title: "POL211 TA Session 3"
#' author: "Gento Kato"
#' date: "October 24, 2018"
#' ---
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls()) # Remove all objects from workspace.
#' ## Revisit Hotel Vacancy problem
#'
#' Calculate the answer to the proability that at least all hotels have one person
test <- list(NA)
index <- list(NA)
i <- 1
for(na in 1:12){
for(nb in 1:(13-na)){
for(nc in 1:(14-na-nb)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb)
index[i] <- i
i <- i + 1
}
}
}
#' ## Distribution Functions
#' ### Binomial Distribution
?rbinom
# Random Draws from the distribution
rbinom(10, size = 1000, prob = c(0.9))
# Pr of specific values in the distribution
dbinom(900, size = 1000, prob = c(0.9))
# Cummulative Probability of values
pbinom(900, size = 1000, prob = c(0.9))
sum(dbinom(0:900, size = 1000, prob = c(0.9)))
# The value that satisfies the specific cummulative probabilities
qbinom(0.8, size = 1000, prob = c(0.9))
#' ### Binomial Distribution?
rbinom(10, size = 1, prob=0.5)
#' ### Poisson Distribution
?rpois
rpois(10, 414)
dpois(400, 414)
ppois(400, 414)
qpois(0.8, 414)
#' ### Continuous Uniform
?runif
runif(10, min=10, max=20)
dunif(15, min=10, max=20)
punif(17, min=10, max=20)
qunif(0.8, min=10, max=20)
#' ### Negative Binomial
?rnbinom
rnbinom(10, size=1000, prob=0.8)
dnbinom(200, size=1000, prob=0.8)
pnbinom(250, size=1000, prob=0.8)
qnbinom(0.8, size=1000, prob=0.8)
#+ include=FALSE
## Render PDF Document
#+ eval=FALSE, echo=FALSE
rmarkdown::render("TA_session_20181024.R","pdf_document")
#' ---
#' title: "POL211 TA Session 3"
#' author: "Gento Kato"
#' date: "October 25, 2018"
#' ---
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls()) # Remove all objects from workspace.
#' ## Revisit Hotel Vacancy problem
#'
#' Calculate the answer to the proability that at least all hotels have one person
test <- list(NA)
index <- list(NA)
i <- 1
for(na in 1:12){
for(nb in 1:(13-na)){
for(nc in 1:(14-na-nb)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb)
index[i] <- i
i <- i + 1
}
}
}
#' ## Distribution Functions
#' ### Binomial Distribution
?rbinom
# Random Draws from the distribution
rbinom(10, size = 1000, prob = c(0.9))
# Pr of specific values in the distribution
dbinom(900, size = 1000, prob = c(0.9))
# Cummulative Probability of values
pbinom(900, size = 1000, prob = c(0.9))
sum(dbinom(0:900, size = 1000, prob = c(0.9)))
# The value that satisfies the specific cummulative probabilities
qbinom(0.8, size = 1000, prob = c(0.9))
#' ### Binomial Distribution?
rbinom(10, size = 1, prob=0.5)
#' ### Poisson Distribution
?rpois
rpois(10, 414)
dpois(400, 414)
ppois(400, 414)
qpois(0.8, 414)
#' ### Continuous Uniform
?runif
runif(10, min=10, max=20)
dunif(15, min=10, max=20)
punif(17, min=10, max=20)
qunif(0.8, min=10, max=20)
#' ### Negative Binomial
?rnbinom
rnbinom(10, size=1000, prob=0.8)
dnbinom(200, size=1000, prob=0.8)
pnbinom(250, size=1000, prob=0.8)
qnbinom(0.8, size=1000, prob=0.8)
#+ include=FALSE
## Render PDF Document
#+ eval=FALSE, echo=FALSE
rmarkdown::render("TA_session_20181025.R","pdf_document")
na=5;
nb=2;
for(nc in 1:(14-na-nb)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb)
index[i] <- i
i <- i + 1
}
test <- list(NA)
index <- list(NA)
i <- 1
na=5;
nb=2;
for(nc in 1:(14-na-nb)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb)
index[i] <- i
i <- i + 1
}
length(test)
length(index)
for(nc in 1:(14-na-nb)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb)
print(test[i])
index[i] <- i
i <- i + 1
}
for(na in 1:12){
for(nb in 1:(13-na)){
for(nc in 1:(14-na-nb)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb)
print(test[i])
index[i] <- i
i <- i + 1
}
}
}
as.numeric(test)
sum(as.numeric(test))
for(na in 1:11){
for(nb in 1:(12-na)){
for(nc in 1:(13-na-nb)){
for(nd in 1:(14-na-nb-nc)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb) * 1/(16-na-nb-nc)
index[i] <- i
i <- i + 1
}
}
}
}
length(test)
test <- list(NA)
index <- list(NA)
i <- 1
for(na in 1:11){
for(nb in 1:(12-na)){
for(nc in 1:(13-na-nb)){
for(nd in 1:(14-na-nb-nc)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb) * 1/(16-na-nb-nc)
index[i] <- i
i <- i + 1
}
}
}
}
length(test)
test <- list(NA)
index <- list(NA)
i <- 1
for(na in 1:11){
for(nb in 1:(12-na)){
for(nc in 1:(13-na-nb)){
for(nd in 1:(14-na-nb-nc)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb) * 1/(16-na-nb-nc)
index[i] <- i
i <- i + 1
}
}
}
}
length(test)
sum(as.numeric(test))
?rbinom
# Random Draws from the distribution
rbinom(10, size = 1000, prob = c(0.9))
# Pr of specific values in the distribution
dbinom(900, size = 1000, prob = c(0.9))
# Pr of specific values in the distribution
dbinom(30, size = 1000, prob = c(0.9))
# Pr of specific values in the distribution
dbinom(901, size = 1000, prob = c(0.9))
# Cummulative Probability of values
pbinom(900, size = 1000, prob = c(0.9))
sum(dbinom(0:900, size = 1000, prob = c(0.9)))
# The value that satisfies the specific cummulative probabilities
qbinom(0.8, size = 1000, prob = c(0.9))
# The value that satisfies the specific cummulative probabilities
qbinom(0.5154177, size = 1000, prob = c(0.9))
#' ### Bernoui Distribution?
rbinom(10, size = 1, prob=0.5)
?rpois
rpois(10, 414)
dpois(400, 414)
ppois(400, 414)
qpois(0.8, 414)
#' ---
#' title: "POL211 TA Session 3"
#' author: "Gento Kato"
#' date: "October 25, 2018"
#' ---
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls()) # Remove all objects from workspace.
#' ## Revisit Hotel Vacancy problem
#'
#' Calculate the answer to the proability that at least all hotels have one person
test <- list(NA)
index <- list(NA)
i <- 1
for(na in 1:12){
for(nb in 1:(13-na)){
for(nc in 1:(14-na-nb)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb)
index[i] <- i
i <- i + 1
}
}
}
#' ## Distribution Functions
#' ### Binomial Distribution
?rbinom
# Random Draws from the distribution
rbinom(10, size = 1000, prob = c(0.9))
# Pr of specific values in the distribution
dbinom(900, size = 1000, prob = c(0.9))
# Cummulative Probability of values
pbinom(900, size = 1000, prob = c(0.9))
sum(dbinom(0:900, size = 1000, prob = c(0.9)))
# The value that satisfies the specific cummulative probabilities
qbinom(0.8, size = 1000, prob = c(0.9))
#' ### Binomial Distribution?
rbinom(10, size = 1, prob=0.5)
#' ### Poisson Distribution
?rpois
rpois(10, 414)
dpois(400, 414)
ppois(400, 414)
qpois(0.8, 414)
#' ### Continuous Uniform
?runif
runif(10, min=10, max=20)
dunif(15, min=10, max=20)
punif(17, min=10, max=20)
qunif(0.8, min=10, max=20)
#' ### Negative Binomial
?rnbinom
rnbinom(10, size=1000, prob=0.8)
dnbinom(200, size=1000, prob=0.8)
pnbinom(250, size=1000, prob=0.8)
qnbinom(0.8, size=1000, prob=0.8)
#+ include=FALSE
## Render PDF Document
#+ eval=FALSE, echo=FALSE
rmarkdown::render("TA_session_20181025.R","pdf_document")
#' ---
#' title: "POL211 TA Session 3"
#' author: "Gento Kato"
#' date: "October 25, 2018"
#' ---
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls()) # Remove all objects from workspace.
#' ## Revisit Hotel Vacancy problem
#'
#' Calculate the answer to the proability that at least all hotels have one person
test <- list(NA)
index <- list(NA)
i <- 1
for(na in 1:12){
for(nb in 1:(13-na)){
for(nc in 1:(14-na-nb)){
test[i] <- 1/16 * 1/(16 - na) * 1/(16-na-nb)
index[i] <- i
i <- i + 1
}
}
}
#' ## Distribution Functions
#' ### Binomial Distribution
?rbinom
# Random Draws from the distribution
rbinom(10, size = 1000, prob = c(0.9))
# Pr of specific values in the distribution
dbinom(900, size = 1000, prob = c(0.9))
# Cummulative Probability of values
pbinom(900, size = 1000, prob = c(0.9))
sum(dbinom(0:900, size = 1000, prob = c(0.9)))
# The value that satisfies the specific cummulative probabilities
qbinom(0.8, size = 1000, prob = c(0.9))
#' ### Binomial Distribution?
rbinom(10, size = 1, prob=0.5)
#' ### Poisson Distribution
?rpois
rpois(10, 414)
dpois(400, 414)
ppois(400, 414)
qpois(0.8, 414)
#' ### Continuous Uniform
?runif
runif(10, min=10, max=20)
dunif(15, min=10, max=20)
punif(17, min=10, max=20)
qunif(0.8, min=10, max=20)
#' ### Negative Binomial
?rnbinom
rnbinom(10, size=1000, prob=0.8)
dnbinom(200, size=1000, prob=0.8)
pnbinom(250, size=1000, prob=0.8)
qnbinom(0.8, size=1000, prob=0.8)
#+ include=FALSE
## Render PDF Document
#+ eval=FALSE, echo=FALSE
rmarkdown::render("TA_session_20181025_updated.R","pdf_document")
